TASK: your goal is to create a complete, portable C implementation of the
runtime above. Include a parser (directly recursive, inspired on Parsec), a
stringifier, and an evaluator. Include a main() function that parses and
evaluates the default test term, printing its normal form and the total
interaction count. Include a simple bump allocator, with a pre-allocated buffer
of with 2^24 Terms. Make your code efficient and correct.

Hints:

- Always use 2 spaces per indentation
- The term tags must be named LAM, APP, etc., and *not* TAG_LAM, TAG_APP, etc.
- For the parser, implement a parse_term() function that dispatches to each
  individual parser type (parse_app, parse_lam, etc.).
- Parse unicode symbols correctly. Avoid the common error:
    main.c:381:12: error: character too large for enclosing character literal type
      381 |   if (c == 'Î»') {
          |            ^

Below is the planned structure of this repo:

...

implement SupTT now, *except* for the parser and the individual interactions.
Implement all other files, including the MakeFile. Note: Since we don't have a
parser yet, the main function must inject the default test term in a hardcoded
fashion for now. Write each file below.
